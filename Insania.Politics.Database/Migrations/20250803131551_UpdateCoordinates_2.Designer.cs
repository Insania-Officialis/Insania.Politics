// <auto-generated />
using System;
using Insania.Politics.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Insania.Politics.Database.Migrations
{
    [DbContext(typeof(PoliticsContext))]
    [Migration("20250803131551_UpdateCoordinates_2")]
    partial class UpdateCoordinates_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("insania_politics")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Insania.Politics.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Псевдоним");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("Описание");

                    b.Property<string>("LanguageForNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_for_names")
                        .HasComment("Язык для названий");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id")
                        .HasComment("Идентификатор организации");

                    b.Property<string>("UsernameCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_create")
                        .HasComment("Логин пользователя, создавшего");

                    b.Property<string>("UsernameUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_update")
                        .HasComment("Логин пользователя, обновившего");

                    b.HasKey("Id");

                    b.HasAlternateKey("Alias");

                    b.HasAlternateKey("Color");

                    b.HasIndex("OrganizationId");

                    b.ToTable("c_countries", "insania_politics", t =>
                        {
                            t.HasComment("Страны");
                        });
                });

            modelBuilder.Entity("Insania.Politics.Entities.CountryCoordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area")
                        .HasComment("Площадь сущности");

                    b.Property<Point>("Center")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("center")
                        .HasComment("Координаты точки центра сущности");

                    b.Property<long?>("CoordinateId")
                        .HasColumnType("bigint")
                        .HasColumnName("coordinate_id")
                        .HasComment("Идентификатор координаты");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id")
                        .HasComment("Идентификатор страны");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("UsernameCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_create")
                        .HasComment("Логин пользователя, создавшего");

                    b.Property<string>("UsernameUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_update")
                        .HasComment("Логин пользователя, обновившего");

                    b.Property<int>("Zoom")
                        .HasColumnType("integer")
                        .HasColumnName("zoom")
                        .HasComment("Коэффициент масштаба отображения сущности");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CoordinateId", "CountryId", "DateDeleted")
                        .IsUnique();

                    b.ToTable("u_countries_coordinates", "insania_politics", t =>
                        {
                            t.HasComment("Координаты стран");
                        });
                });

            modelBuilder.Entity("Insania.Politics.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id")
                        .HasComment("Идентификатор родителя");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Идентификатор типа");

                    b.Property<string>("UsernameCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_create")
                        .HasComment("Логин пользователя, создавшего");

                    b.Property<string>("UsernameUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_update")
                        .HasComment("Логин пользователя, обновившего");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("r_organizations", "insania_politics", t =>
                        {
                            t.HasComment("Организации");
                        });
                });

            modelBuilder.Entity("Insania.Politics.Entities.OrganizationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Псевдоним");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UsernameCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_create")
                        .HasComment("Логин пользователя, создавшего");

                    b.Property<string>("UsernameUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_update")
                        .HasComment("Логин пользователя, обновившего");

                    b.HasKey("Id");

                    b.HasAlternateKey("Alias");

                    b.ToTable("c_organizations_types", "insania_politics", t =>
                        {
                            t.HasComment("Типы организаций");
                        });
                });

            modelBuilder.Entity("Insania.Shared.Entities.Coordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<Polygon>("PolygonEntity")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("polygon")
                        .HasComment("Полигон (массив координат)");

                    b.Property<string>("TypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Идентификатор типа координаты");

                    b.Property<string>("UsernameCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_create")
                        .HasComment("Логин пользователя, создавшего");

                    b.Property<string>("UsernameUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_update")
                        .HasComment("Логин пользователя, обновившего");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("r_coordinates", "insania_politics");

                    b.HasDiscriminator<string>("TypeDiscriminator").HasValue("Coordinate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Insania.Shared.Entities.CoordinateType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Псевдоним");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BorderColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("TypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("UsernameCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_create")
                        .HasComment("Логин пользователя, создавшего");

                    b.Property<string>("UsernameUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_update")
                        .HasComment("Логин пользователя, обновившего");

                    b.HasKey("Id");

                    b.HasAlternateKey("Alias");

                    b.ToTable("c_coordinates_types", "insania_politics");

                    b.HasDiscriminator<string>("TypeDiscriminator").HasValue("CoordinateType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Insania.Politics.Entities.CoordinatePolitics", b =>
                {
                    b.HasBaseType("Insania.Shared.Entities.Coordinate");

                    b.HasIndex("PolygonEntity");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PolygonEntity"), "gist");

                    b.ToTable("r_coordinates", "insania_politics", t =>
                        {
                            t.HasComment("Координаты политики");
                        });

                    b.HasDiscriminator().HasValue("Politics");
                });

            modelBuilder.Entity("Insania.Politics.Entities.CoordinateTypePolitics", b =>
                {
                    b.HasBaseType("Insania.Shared.Entities.CoordinateType");

                    b.ToTable("c_coordinates_types", "insania_politics", t =>
                        {
                            t.HasComment("Типы координат политики");
                        });

                    b.HasDiscriminator().HasValue("Politics");
                });

            modelBuilder.Entity("Insania.Politics.Entities.Country", b =>
                {
                    b.HasOne("Insania.Politics.Entities.Organization", "OrganizationEntity")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationEntity");
                });

            modelBuilder.Entity("Insania.Politics.Entities.CountryCoordinate", b =>
                {
                    b.HasOne("Insania.Shared.Entities.Coordinate", "CoordinateEntity")
                        .WithMany()
                        .HasForeignKey("CoordinateId");

                    b.HasOne("Insania.Politics.Entities.Country", "CountryEntity")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoordinateEntity");

                    b.Navigation("CountryEntity");
                });

            modelBuilder.Entity("Insania.Politics.Entities.Organization", b =>
                {
                    b.HasOne("Insania.Politics.Entities.Organization", "ParentEntity")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Insania.Politics.Entities.OrganizationType", "TypeEntity")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentEntity");

                    b.Navigation("TypeEntity");
                });

            modelBuilder.Entity("Insania.Shared.Entities.Coordinate", b =>
                {
                    b.HasOne("Insania.Shared.Entities.CoordinateType", "TypeEntity")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("TypeEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
