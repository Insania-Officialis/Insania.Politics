# Название рабочего процесса
name: CI/CD Pipeline

# Триггеры запуска сборки:
on:
  # При пуше в ветку
  push:    
    # Список веток
    branches: [ main ]

# Определение заданий
jobs:
  # Задание для запуска unit-тестов на linux
  unit-tests-linux:
    runs-on: insania-linux-server
    
    # Шаги выполнения задания
    steps:
    # Обновление кода
    - name: Обновление кода
      run: |
        cd /app
        cd Insania.Politics
        git pull
      shell: bash

    # Сборка и запуск контейнера с тестами
    - name: Сборка и запуск unit-тестов
      run: |
        cd /app
        docker-compose build insania_politics_unit_tests
        if docker-compose run --rm insania_politics_unit_tests; then
          echo "✅ Успешное завершение unit-тестов"
        else
          echo "❌ Не пройдены unit-тесты"
          docker-compose logs insania_politics_unit_tests --tail=50
          exit 1
        fi
      shell: bash

  # Задание для запуска unit-тестов на windows
  unit-tests-windows:
    runs-on: insania-windows-server
    
    # Шаги выполнения задания
    steps:
    # Обновление кода
    - name: Обновление кода
      run: |
        cd C:\Insania
        cd Insania.Politics
        git pull
      shell: powershell

    # Сборка и запуск контейнера с тестами
    - name: Сборка и запуск unit-тестов
      run: |
        cd C:\Insania
        docker-compose build insania_politics_unit_tests
        try {
          docker-compose run --rm insania_politics_unit_tests
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Успешное завершение unit-тестов"
          } else {
            throw "Tests failed with exit code: $LASTEXITCODE"
          }
        } catch {
          Write-Host "❌ Не пройдены unit-тесты"
          docker-compose logs insania_politics_unit_tests --tail=50
          exit 1
        }
      shell: powershell

  # Задание для сборки на linux
  build-linux:
    runs-on: insania-linux-server

    # Ожидание завершения unit-тестов
    needs: unit-tests-linux

    # Шаги выполнения задания
    steps:
    # Обновление кода
    - name: Обновление кода
      run: |
        cd /app
        cd Insania.Politics
        git pull
      shell: bash

    # Остановка первого контейнера чтения
    - name: Остановка первого контейнера чтения
      run: |
        cd /app
        docker-compose stop insania_politics_api_read_1
      shell: bash

    # Сборка первого контейнера чтения
    - name: Сборка первого контейнера чтения
      run: |
        cd /app
        docker-compose build insania_politics_api_read_1
      shell: bash

    # Запуск первого контейнера чтения
    - name: Запуск первого контейнера чтения
      run: |
        cd /app
        docker-compose up -d insania_politics_api_read_1
      shell: bash

    # Проверка статуса первого контейнера чтения
    - name: Проверка статуса первого контейнера чтения
      run: |
        cd /app
        sleep 10
        status=$(docker-compose ps insania_politics_api_read_1)
        echo "Статус контейнера: $status"
        
        if echo "$status" | grep -q "Up"; then
          echo "✅ Контейнер успешно запущен!"
          docker-compose ps
        else
          echo "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_read_1 --tail=20
          exit 1
        fi
      shell: bash

    # Остановка второго контейнера чтения
    - name: Остановка второго контейнера чтения
      run: |
        cd /app
        docker-compose stop insania_politics_api_read_2
      shell: bash

    # Сборка второго контейнера чтения
    - name: Сборка второго контейнера чтения
      run: |
        cd /app
        docker-compose build insania_politics_api_read_2
      shell: bash

    # Запуск второго контейнера чтения
    - name: Запуск второго контейнера чтения
      run: |
        cd /app
        docker-compose up -d insania_politics_api_read_2
      shell: bash

    # Проверка статуса второго контейнера чтения
    - name: Проверка статуса второго контейнера чтения
      run: |
        cd /app
        sleep 10
        status=$(docker-compose ps insania_politics_api_read_2)
        echo "Статус контейнера: $status"
        
        if echo "$status" | grep -q "Up"; then
          echo "✅ Контейнер успешно запущен!"
          docker-compose ps
        else
          echo "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_read_2 --tail=20
          exit 1
        fi
      shell: bash

    # Остановка первого контейнера записи
    - name: Остановка первого контейнера записи
      run: |
        cd /app
        docker-compose stop insania_politics_api_commit_1
      shell: bash

    # Сборка первого контейнера записи
    - name: Сборка первого контейнера записи
      run: |
        cd /app
        docker-compose build insania_politics_api_commit_1
      shell: bash

    # Запуск первого контейнера записи
    - name: Запуск первого контейнера записи
      run: |
        cd /app
        docker-compose up -d insania_politics_api_commit_1
      shell: bash

    # Проверка статуса первого контейнера записи
    - name: Проверка статуса первого контейнера записи
      run: |
        cd /app
        sleep 10
        status=$(docker-compose ps insania_politics_api_commit_1)
        echo "Статус контейнера: $status"
        
        if echo "$status" | grep -q "Up"; then
          echo "✅ Контейнер успешно запущен!"
          docker-compose ps
        else
          echo "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_commit_1 --tail=20
          exit 1
        fi
      shell: bash

    # Остановка второго контейнера записи
    - name: Остановка второго контейнера записи
      run: |
        cd /app
        docker-compose stop insania_politics_api_commit_2
      shell: bash

    # Сборка второго контейнера записи
    - name: Сборка второго контейнера записи
      run: |
        cd /app
        docker-compose build insania_politics_api_commit_2
      shell: bash

    # Запуск второго контейнера записи
    - name: Запуск второго контейнера записи
      run: |
        cd /app
        docker-compose up -d insania_politics_api_commit_2
      shell: bash

    # Проверка статуса второго контейнера записи
    - name: Проверка статуса второго контейнера записи
      run: |
        cd /app
        sleep 10
        status=$(docker-compose ps insania_politics_api_commit_2)
        echo "Статус контейнера: $status"
        
        if echo "$status" | grep -q "Up"; then
          echo "✅ Контейнер успешно запущен!"
          docker-compose ps
        else
          echo "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_commit_2 --tail=20
          exit 1
        fi
      shell: bash

  # Задание для сборки на windows
  build-windows:
    runs-on: insania-windows-server

    # Ожидание завершения unit-тестов
    needs: unit-tests-windows

    # Шаги выполнения задания
    steps:
    # Обновление кода
    - name: Обновление кода
      run: |
        cd C:\Insania
        cd Insania.Politics
        git pull
      shell: powershell

    # Остановка первого контейнера чтения
    - name: Остановка первого контейнера чтения
      run: |
        cd C:\Insania
        docker-compose stop insania_politics_api_read_1
      shell: powershell

    # Сборка первого контейнера чтения
    - name: Сборка первого контейнера чтения
      run: |
        cd C:\Insania
        docker-compose build insania_politics_api_read_1
      shell: powershell

    # Запуск первого контейнера чтения
    - name: Запуск первого контейнера чтения
      run: |
        cd C:\Insania
        docker-compose up -d insania_politics_api_read_1
      shell: powershell

    # Проверка статуса первого контейнера чтения
    - name: Проверка статуса первого контейнера чтения
      run: |
        cd C:\Insania
        Start-Sleep -Seconds 10
        $status = docker-compose ps insania_politics_api_read_1
        Write-Host "Статус контейнера: $status"
        
        if ($status -like "*Up*") {
          Write-Host "✅ Контейнер успешно запущен!"
          docker-compose ps
        } else {
          Write-Host "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_read_1 --tail=20
          exit 1
        }
      shell: powershell

    # Остановка второго контейнера чтения
    - name: Остановка второго контейнера чтения
      run: |
        cd C:\Insania
        docker-compose stop insania_politics_api_read_2
      shell: powershell

    # Сборка второго контейнера чтения
    - name: Сборка второго контейнера чтения
      run: |
        cd C:\Insania
        docker-compose build insania_politics_api_read_2
      shell: powershell

    # Запуск второго контейнера чтения
    - name: Запуск второго контейнера чтения
      run: |
        cd C:\Insania
        docker-compose up -d insania_politics_api_read_2
      shell: powershell

    # Проверка статуса второго контейнера чтения
    - name: Проверка статуса второго контейнера чтения
      run: |
        cd C:\Insania
        Start-Sleep -Seconds 10
        $status = docker-compose ps insania_politics_api_read_2
        Write-Host "Статус контейнера: $status"
        
        if ($status -like "*Up*") {
          Write-Host "✅ Контейнер успешно запущен!"
          docker-compose ps
        } else {
          Write-Host "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_read_2 --tail=20
          exit 1
        }
      shell: powershell

    # Остановка первого контейнера записи
    - name: Остановка первого контейнера записи
      run: |
        cd C:\Insania
        docker-compose stop insania_politics_api_commit_1
      shell: powershell

    # Сборка первого контейнера записи
    - name: Сборка первого контейнера записи
      run: |
        cd C:\Insania
        docker-compose build insania_politics_api_commit_1
      shell: powershell

    # Запуск первого контейнера записи
    - name: Запуск первого контейнера записи
      run: |
        cd C:\Insania
        docker-compose up -d insania_politics_api_commit_1
      shell: powershell

    # Проверка статуса первого контейнера записи
    - name: Проверка статуса первого контейнера записи
      run: |
        cd C:\Insania
        Start-Sleep -Seconds 10
        $status = docker-compose ps insania_politics_api_commit_1
        Write-Host "Статус контейнера: $status"
        
        if ($status -like "*Up*") {
          Write-Host "✅ Контейнер успешно запущен!"
          docker-compose ps
        } else {
          Write-Host "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_commit_1 --tail=20
          exit 1
        }
      shell: powershell

    # Остановка второго контейнера записи
    - name: Остановка второго контейнера записи
      run: |
        cd C:\Insania
        docker-compose stop insania_politics_api_commit_2
      shell: powershell

    # Сборка второго контейнера записи
    - name: Сборка второго контейнера записи
      run: |
        cd C:\Insania
        docker-compose build insania_politics_api_commit_2
      shell: powershell

    # Запуск второго контейнера записи
    - name: Запуск второго контейнера записи
      run: |
        cd C:\Insania
        docker-compose up -d insania_politics_api_commit_2
      shell: powershell

    # Проверка статуса второго контейнера записи
    - name: Проверка статуса второго контейнера записи
      run: |
        cd C:\Insania
        Start-Sleep -Seconds 10
        $status = docker-compose ps insania_politics_api_commit_2
        Write-Host "Статус контейнера: $status"
        
        if ($status -like "*Up*") {
          Write-Host "✅ Контейнер успешно запущен!"
          docker-compose ps
        } else {
          Write-Host "❌ Не удалось запустить контейнер"
          docker-compose logs insania_politics_api_commit_2 --tail=20
          exit 1
        }
      shell: powershell